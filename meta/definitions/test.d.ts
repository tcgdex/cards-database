/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * fetch the list of cards
         * @description Returns a list of all cards, with support for filtering, sorting, and pagination
         */
        get: operations["cards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/{cardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find card by ID
         * @description Returns detailed information about a specified card
         */
        get: operations["getCardById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all sets
         * @description Lists all Pokemon TCG sets with basic information, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SetResume"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sets/{set}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find set by ID
         * @description Returns detailed information about a specific set, including its card list
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of set to return */
                    set: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Set"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The Set doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sets/{set}/{cardLocalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find card by set and local ID
         * @description Returns detailed information about a specific card identified by its set and local ID within that set
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    set: string;
                    cardLocalId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Card"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description the Set or cardLocalId are incorrect */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all series
         * @description Returns a list of all available Pokemon TCG series, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SerieResume"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/{serie}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find series by ID
         * @description Returns detailed information about a specific series, including all sets in that series
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of serie to return */
                    serie: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Serie"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The Serie doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all categories
         * @description Returns a list of all available card categories, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by category
         * @description Returns cards matching the specified category, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    category: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StringEndpoint"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The Category doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all HP values
         * @description Returns a list of all available HP values for Pokemon cards, with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hp/{hp}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by HP value
         * @description Returns cards with the specified HP value, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    hp: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StringEndpoint"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The HP count doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/illustrators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all illustrators
         * @description Returns a list of all card illustrators, with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/illustrators/{illustrator}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by illustrator
         * @description Returns cards by the specified illustrator, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    illustrator: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StringEndpoint"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The Illustrator doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rarities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all rarities
         * @description Returns a list of all card rarity types, with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rarities/{rarity}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by rarity
         * @description Returns cards with the specified rarity, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    rarity: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StringEndpoint"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The Rarity doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/retreats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all retreat costs
         * @description Returns a list of all available retreat cost values, with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/retreats/{retreat}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by retreat cost
         * @description Returns cards with the specified retreat cost, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    retreat: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StringEndpoint"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The Retreat count doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all types
         * @description Returns a list of all Pokemon card types, with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/types/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by type
         * @description Returns cards of the specified type, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    type: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CardResume"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The Type doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dex-ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all Pokedex IDs
         * @description Returns a list of all Pokedex ID numbers, with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dex-ids/{dexId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by Pokedex ID
         * @description Returns cards with the specified Pokedex ID, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    dexId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CardResume"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description no cards contain the specified dexID */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/energy-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all energy types
         * @description Returns a list of all energy card types, with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/energy-types/{energy-type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by energy type
         * @description Returns cards with the specified energy type, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    "energy-type": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CardResume"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The specified energy-type doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regulation-marks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all regulation marks
         * @description Returns a list of all regulation marks on cards, with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regulation-marks/{regulation-mark}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by regulation mark
         * @description Returns cards with the specified regulation mark, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    "regulation-mark": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CardResume"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The regulation-mark doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all Pokemon stages
         * @description Returns a list of all Pokemon evolution stages, with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/{stage}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by stage
         * @description Returns cards with the specified evolution stage, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    stage: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CardResume"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The stage doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suffixes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all card suffixes
         * @description Returns a list of all card suffixes (EX, GX, V, etc.), with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suffixes/{suffix}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by suffix
         * @description Returns cards with the specified suffix, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    suffix: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CardResume"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The suffix doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trainer-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all trainer types
         * @description Returns a list of all trainer card types, with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trainer-types/{trainer-type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by trainer type
         * @description Returns cards with the specified trainer type, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    "trainer-type": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CardResume"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The trainer-type doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all card variants
         * @description Returns a list of all card variant types (normal, holo, reverse, etc.), with support for sorting and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/variants/{variant}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cards by variant
         * @description Returns cards with the specified variant, with support for filtering, sorting, and pagination
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter results by field value.
                     *
                     *     Supports various operators:
                     *     - Default/`like:` - Laxist equality (contains, case insensitive)
                     *     - `not:`/`notlike:` - Laxist inequality
                     *     - `eq:` - Strict equality
                     *     - `neq:` - Strict inequality
                     *     - `gte:` - Greater than or equal (numbers)
                     *     - `lte:` - Less than or equal (numbers)
                     *     - `gt:` - Greater than (numbers)
                     *     - `lt:` - Less than (numbers)
                     *     - `null:` - Field is null
                     *     - `notnull:` - Field is not null
                     *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                     *
                     * @example {"name": "eq:Furret", "hp": "lte:60"}
                     */
                    filters?: components["parameters"]["filter"];
                    /**
                     * @description Field to sort results by (overrides default sorting)
                     * @example name
                     */
                    "sort:field"?: components["parameters"]["sortField"];
                    /** @description Order to sort results (ASC or DESC) */
                    "sort:order"?: components["parameters"]["sortOrder"];
                    /**
                     * @description Page number for paginated results
                     * @example 1
                     */
                    "pagination:page"?: components["parameters"]["paginationPage"];
                    /**
                     * @description Number of items per page (applied when pagination:page is used)
                     * @example 25
                     */
                    "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
                };
                header?: never;
                path: {
                    variant: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CardResume"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description The variant doesn't exist */
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description RFC 9457 problem details object for API errors */
        Problem: {
            /**
             * Format: uri
             * @description URI reference that identifies the problem type
             * @example https://tcgdex.dev/errors/not-found
             */
            type: string;
            /**
             * @description Short, human-readable summary of the problem type
             * @example The resource you are trying to reach does not exist
             */
            title: string;
            /**
             * @description HTTP status code
             * @example 404
             */
            status: number;
            /**
             * @description Human-readable explanation specific to this occurrence of the problem
             * @example The requested card with ID 'invalid-id' could not be found
             */
            detail?: string;
            /**
             * @description The API endpoint that was requested
             * @example /v2/i-do-not-exists
             */
            endpoint?: string;
            /**
             * @description The HTTP method used for the request
             * @example GET
             */
            method?: string;
        };
        WeakRes: {
            /** @example Psychic */
            type: string;
            /** @example x2 */
            value?: string | null;
        }[];
        /** @description Represents a booster pack that contains Pokemon cards */
        Booster: {
            /**
             * @description The booster ID using format boo_<set_id>-<booster_name>
             * @example boo_A1-mewtwo
             */
            id: string;
            /**
             * @description The name of the booster
             * @example Mewtwo
             */
            name: string;
            /**
             * @description URL to the logo of the booster
             * @example https://assets.tcgdex.net/en/tcgp/A1/boosters/mewtwo-logo
             */
            logo?: string | null;
            /**
             * @description URL to the front artwork of the booster pack
             * @example https://assets.tcgdex.net/en/tcgp/A1/boosters/mewtwo-front
             */
            artwork_front?: string | null;
            /**
             * @description URL to the back artwork of the booster pack
             * @example https://assets.tcgdex.net/en/tcgp/A1/boosters/mewtwo-back
             */
            artwork_back?: string | null;
        };
        /** @description Basic information about a Pokemon TCG series */
        SerieResume: {
            /** @description Unique identifier of the series */
            id: string;
            /** @description Name of the series */
            name: string;
            /** @description URL to the logo of the series */
            logo?: string | null;
        };
        /** @description Detailed information about a Pokemon TCG series, including all sets within the series */
        Serie: {
            /** @description Unique identifier of the series */
            id: string;
            /** @description Name of the series */
            name: string;
            /** @description URL to the logo of the series */
            logo?: string;
            /**
             * Format: date
             * @description Release date of the series
             */
            releaseDate: string;
            /** @description The first set released in this series */
            firstSet: components["schemas"]["SetResume"];
            /** @description The most recent set released in this series */
            lastSet: components["schemas"]["SetResume"];
            /** @description All sets contained in this series */
            sets: components["schemas"]["SetResume"][];
        };
        /** @description Detailed information about a Pokemon TCG set, including card lists and metadata */
        Set: {
            /**
             * @description Unique identifier of the set
             * @example base1
             */
            id: string;
            /**
             * @description Name of the set
             * @example Base Set
             */
            name: string;
            /**
             * @description URL to the logo of the set
             * @example https://assets.tcgdex.net/en/base/base1/logo
             */
            logo?: string;
            /**
             * @description URL to the set symbol
             * @example https://assets.tcgdex.net/univ/base/base1/symbol
             */
            symbol?: string | null;
            /** @description The series this set belongs to */
            serie: components["schemas"]["SerieResume"];
            /** @description Identifier for this set in Pokemon TCG Online */
            tcgOnline?: string | null;
            /**
             * Format: date
             * @description Official release date of the set
             */
            releaseDate: string;
            /** @description Indicates which card variants exist in this set */
            variants?: {
                /** @description Indicates whether normal variants exist */
                normal?: boolean | null;
                /** @description Indicates whether reverse holo variants exist */
                reverse?: boolean | null;
                /** @description Indicates whether holo variants exist */
                holo?: boolean | null;
                /** @description Indicates whether first edition variants exist */
                firstEdition?: boolean | null;
                /** @description Indicates whether promotional variants exist */
                wPromo?: boolean | null;
            };
            /**
             * @description The booster packs available in this set
             * @example [
             *       {
             *         "id": "boo_A1-mewtwo",
             *         "name": "Mewtwo",
             *         "logo": "https://assets.tcgdex.net/en/tcgp/A1/boosters/mewtwo-logo",
             *         "artwork_front": "https://assets.tcgdex.net/en/tcgp/A1/boosters/mewtwo-front",
             *         "artwork_back": "https://assets.tcgdex.net/en/tcgp/A1/boosters/mewtwo-front"
             *       },
             *       {
             *         "id": "boo_A1-pikachu",
             *         "name": "Pikachu"
             *       }
             *     ]
             */
            boosters?: components["schemas"]["Booster"][];
            /** @description Information about tournament legality of this set */
            legal: {
                /**
                 * @description Indicates whether this set is legal in standard format tournaments
                 * @example false
                 */
                standard: boolean;
                /**
                 * @description Indicates whether this set is legal in expanded format tournaments
                 * @example true
                 */
                expanded: boolean;
            };
            /** @description Common abbreviations used for this set */
            abbreviation?: {
                /**
                 * @description The official abbreviation used by Pokemon Company
                 * @example BS
                 */
                official?: string;
                /**
                 * @description Localized abbreviation used in the current language
                 * @example BS
                 */
                localized?: string;
            };
            /** @description Statistics about the number of cards in this set */
            cardCount: {
                /**
                 * @description Total number of cards in the set including variants
                 * @example 101
                 */
                total: number;
                /**
                 * @description Number of cards officially numbered in the set
                 * @example 100
                 */
                official: number;
                /** @description Number of cards having a normal variant */
                normal?: number;
                /** @description Number of cards having a reverse holo variant */
                reverse?: number;
                /** @description Number of cards having a holographic variant */
                holo?: number;
                /** @description Number of cards having a first edition variant */
                firstEd?: number | null;
            };
            /** @description List of all cards in this set */
            cards: components["schemas"]["CardResume"][];
        };
        /** @description Basic information about a Pokemon TCG set */
        SetResume: {
            /**
             * @description Unique identifier of the set
             * @example base1
             */
            id: string;
            /**
             * @description Name of the set
             * @example Base Set
             */
            name: string;
            /**
             * @description URL to the logo of the set
             * @example https://assets.tcgdex.net/en/base/base1/logo
             */
            logo?: string;
            /**
             * @description URL to the set symbol
             * @example https://assets.tcgdex.net/univ/base/base1/symbol
             */
            symbol?: string;
            /** @description Statistics about the number of cards in this set */
            cardCount: {
                /**
                 * @description Total number of cards in the set including variants
                 * @example 101
                 */
                total: number;
                /**
                 * @description Number of cards officially numbered in the set
                 * @example 100
                 */
                official: number;
            };
        };
        /** @description Basic information about a Pokemon TCG card */
        CardResume: {
            /**
             * @description Unique identifier of the card
             * @example base1-1
             */
            id: string;
            /**
             * @description Card number within its set
             * @example 1
             */
            localId: string;
            /**
             * @description URL to the card image
             * @example https://assets.tcgdex.net/en/base/base1/1
             */
            image?: string | null;
            /**
             * @description Name of the card (including any suffix)
             * @example Alakazam
             */
            name: string;
        };
        /** @description Detailed information about a Pokemon TCG card, including game mechanics */
        Card: {
            /**
             * @description Unique identifier of the card
             * @example base1-1
             */
            id: string;
            /**
             * @description Card number within its set
             * @example 1
             */
            localId: string;
            /**
             * @description URL to the card image
             * @example https://assets.tcgdex.net/en/base/base1/1
             */
            image?: string;
            /**
             * @description Name of the card (including any suffix)
             * @example Alakazam
             */
            name: string;
            /**
             * @description Artist who illustrated the card
             * @example Ken Sugimori
             */
            illustrator?: string | null;
            /**
             * @description Card category (Pokemon, Trainer, or Energy)
             * @example Pokemon
             */
            category: string;
            /**
             * @description Card rarity (Common, Uncommon, Rare, etc.)
             * @example Rare
             */
            rarity: string;
            /** @description The set this card belongs to */
            set: components["schemas"]["SetResume"];
            /** @description Indicates which variants of this card exist (overrides set variants) */
            variants?: {
                /** @description Indicates whether a normal variant exists */
                normal: boolean;
                /** @description Indicates whether a reverse holo variant exists */
                reverse: boolean;
                /** @description Indicates whether a holo variant exists */
                holo: boolean;
                /** @description Indicates whether a first edition variant exists */
                firstEdition: boolean;
                /** @description Indicates whether a promotional variant exists */
                wPromo: boolean;
            };
            /**
             * @description Hit Points (HP) of the Pokemon
             * @example 80
             */
            hp?: number | null;
            /** @description Energy types of the Pokemon */
            types?: string[] | null;
            /**
             * @description Name of the Pokemon this evolves from
             * @example Kadabra
             */
            evolveFrom?: string | null;
            /**
             * @description Evolution stage (Basic, Stage 1, Stage 2, etc.)
             * @example Stage 2
             */
            stage?: string | null;
            /** @description Special card suffix (EX, GX, V, etc.) */
            suffix?: string | null;
            /** @description Pokemon's held item information */
            item?: {
                /** @description Name of the held item */
                name: string;
                /** @description Effect of the held item */
                effect: string;
            };
            /** @description Type of trainer card (Item, Supporter, Stadium, Tool) */
            trainerType?: string | null;
            /** @description Type of energy card (Basic, Special) */
            energyType?: string | null;
            /**
             * @description Regulation mark on cards (introduced in Sword & Shield)
             * @example E
             */
            regulationMark?: string | null;
            /** @description Information about tournament legality of this card */
            legal: {
                /**
                 * @description Indicates whether this card is legal in standard format tournaments
                 * @example false
                 */
                standard?: boolean;
                /**
                 * @description Indicates whether this card is legal in expanded format tournaments
                 * @example true
                 */
                expanded?: boolean;
            };
            /** @description Descriptive text or flavor text on the card */
            description?: string | null;
            /**
             * @description Level of the Pokemon (can be a string 'X' for LEVEL-UP cards)
             * @example 42
             */
            level?: number | string;
            /** @description Pokemon abilities (Poké-Power, Poké-Body, Ability, etc.) */
            abilities?: {
                /**
                 * @description Type of ability (Poké-Power, Poké-Body, Ability, etc.)
                 * @example Poké-Power
                 */
                type?: string;
                /**
                 * @description Name of the ability
                 * @example Damage Swap
                 */
                name?: string;
                /**
                 * @description Effect text of the ability
                 * @example As often as you like...
                 */
                effect?: string | null;
            }[];
            /** @description Pokemon attacks */
            attacks?: {
                /** @description Energy cost to use this attack */
                cost?: string[];
                /**
                 * @description Name of the attack
                 * @example Confuse Ray
                 */
                name: string;
                /**
                 * @description Effect text of the attack
                 * @example Flip a coin. If heads, ...
                 */
                effect?: string | null;
                /**
                 * @description Base damage of the attack (can be string for special damage)
                 * @example 30
                 */
                damage?: number | string;
            }[];
            /**
             * @description Retreat cost of the Pokemon
             * @example 3
             */
            retreat?: number | null;
            /** @description Pokedex number(s) of the Pokemon */
            dexId?: number[];
            /** @description Types the Pokemon is weak against */
            weaknesses?: components["schemas"]["WeakRes"][];
            /** @description Types the Pokemon is resistant to */
            resistances?: components["schemas"]["WeakRes"][];
            /**
             * @description Boosters in which this card is available
             * @example [
             *       {
             *         "id": "boo_A1-mewtwo",
             *         "name": "Mewtwo",
             *         "logo": "https://assets.tcgdex.net/en/tcgp/A1/boosters/mewtwo-logo",
             *         "artwork_front": "https://assets.tcgdex.net/en/tcgp/A1/boosters/mewtwo-front",
             *         "artwork_back": "https://assets.tcgdex.net/en/tcgp/A1/boosters/mewtwo-front"
             *       }
             *     ]
             */
            boosters?: components["schemas"]["Booster"][];
            /**
             * Format: date-time
             * @description Timestamp of when this card data was last updated
             */
            updated: string;
        };
        /** @description Represents a collection of cards matching a specific string value (for endpoints like types, rarities, etc.) */
        StringEndpoint: {
            /** @description The string value this endpoint represents */
            name: string;
            /** @description Cards matching the specific string value */
            cards: components["schemas"]["CardResume"][];
        };
    };
    responses: {
        /** @description The specified resource was not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "type": "https://tcgdex.dev/errors/not-found",
                 *       "title": "Resource Not Found",
                 *       "status": 404,
                 *       "detail": "The requested resource could not be found",
                 *       "endpoint": "/v2/cards/invalid-id",
                 *       "method": "GET"
                 *     } */
                "application/problem+json": components["schemas"]["Problem"];
            };
        };
        /** @description The request was invalid */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "type": "https://tcgdex.dev/errors/bad-request",
                 *       "title": "Invalid Request",
                 *       "status": 400,
                 *       "detail": "The request contains invalid parameters",
                 *       "endpoint": "/v2/sets/invalid-format",
                 *       "method": "GET"
                 *     } */
                "application/problem+json": components["schemas"]["Problem"];
            };
        };
        /** @description An unexpected error occurred on the server */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "type": "https://tcgdex.dev/errors/server-error",
                 *       "title": "Internal Server Error",
                 *       "status": 500,
                 *       "detail": "An unexpected error occurred while processing your request",
                 *       "endpoint": "/v2/cards",
                 *       "method": "GET"
                 *     } */
                "application/problem+json": components["schemas"]["Problem"];
            };
        };
    };
    parameters: {
        /**
         * @description Filter results by field value.
         *
         *     Supports various operators:
         *     - Default/`like:` - Laxist equality (contains, case insensitive)
         *     - `not:`/`notlike:` - Laxist inequality
         *     - `eq:` - Strict equality
         *     - `neq:` - Strict inequality
         *     - `gte:` - Greater than or equal (numbers)
         *     - `lte:` - Less than or equal (numbers)
         *     - `gt:` - Greater than (numbers)
         *     - `lt:` - Less than (numbers)
         *     - `null:` - Field is null
         *     - `notnull:` - Field is not null
         *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
         *
         * @example {"name": "eq:Furret", "hp": "lte:60"}
         */
        filter: {
            [key: string]: string;
        } | null;
        /**
         * @description Field to sort results by (overrides default sorting)
         * @example name
         */
        sortField: string | null;
        /** @description Order to sort results (ASC or DESC) */
        sortOrder: "ASC" | "DESC";
        /**
         * @description Page number for paginated results
         * @example 1
         */
        paginationPage: number | null;
        /**
         * @description Number of items per page (applied when pagination:page is used)
         * @example 25
         */
        paginationItemsPerPage: number | null;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    cards: {
        parameters: {
            query?: {
                /**
                 * @description Filter results by field value.
                 *
                 *     Supports various operators:
                 *     - Default/`like:` - Laxist equality (contains, case insensitive)
                 *     - `not:`/`notlike:` - Laxist inequality
                 *     - `eq:` - Strict equality
                 *     - `neq:` - Strict inequality
                 *     - `gte:` - Greater than or equal (numbers)
                 *     - `lte:` - Less than or equal (numbers)
                 *     - `gt:` - Greater than (numbers)
                 *     - `lt:` - Less than (numbers)
                 *     - `null:` - Field is null
                 *     - `notnull:` - Field is not null
                 *     - Multiple values with `|` (e.g., `name=eq:Furret|Pikachu`)
                 *
                 * @example {"name": "eq:Furret", "hp": "lte:60"}
                 */
                filters?: components["parameters"]["filter"];
                /**
                 * @description Field to sort results by (overrides default sorting)
                 * @example name
                 */
                "sort:field"?: components["parameters"]["sortField"];
                /** @description Order to sort results (ASC or DESC) */
                "sort:order"?: components["parameters"]["sortOrder"];
                /**
                 * @description Page number for paginated results
                 * @example 1
                 */
                "pagination:page"?: components["parameters"]["paginationPage"];
                /**
                 * @description Number of items per page (applied when pagination:page is used)
                 * @example 25
                 */
                "pagination:itemsPerPage"?: components["parameters"]["paginationItemsPerPage"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardResume"][];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getCardById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of card to return */
                cardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Card"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
